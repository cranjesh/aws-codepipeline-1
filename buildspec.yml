version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18
  pre_build:
    commands:
      # Assume IAM role in Account A
      - aws sts assume-role --role-arn arn:aws:iam::<Account_A_ID>:role/<Role_In_Account_A> --role-session-name CodeBuildSession --region <Region> > assume-role-output.json

      # Extract assumed role credentials from the output
      - export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' assume-role-output.json)
      - export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' assume-role-output.json)
      - export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' assume-role-output.json)
  build:
    commands:
      - echo "Building docker image."
      - pwd
      - ls
      - docker build --no-cache -t "docker-container-nodejs-lambda-2:latest" .
      - docker tag docker-container-nodejs-lambda-2:latest 975050300123.dkr.ecr.ap-southeast-2.amazonaws.com/docker-container-nodejs-lambda-2:latest
      - docker images
      - docker login -u AWS -p $(aws ecr get-login-password --region ap-southeast-2) 975050300123.dkr.ecr.ap-southeast-2.amazonaws.com
      - docker push 975050300123.dkr.ecr.ap-southeast-2.amazonaws.com/docker-container-nodejs-lambda-2:latest
      - aws lambda update-function-code --function-name docker-container-nodejs-lambda-2 --image-uri 598327188465.dkr.ecr.ap-southeast-2.amazonaws.com/docker-container-nodejs-lambda-2:latest
      - echo "done"
